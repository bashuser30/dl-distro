#!/usr/bin/env bash
# https://codeberg.org/codeberge/dl-distro/src/branch/master/README.md

set -euo pipefail

wget_file() {
    for file in "$@"; do
        if ! wget -q --show-progress -c "$url/$file"; then
            echo -e "\nError: Failed to download $file.\n"
            exit 1
        fi
    done
}

fetch_gpg_key() {
    if ! gpg --list-keys "$gpg_key" &> /dev/null; then
        echo -e "\nFetching GPG key: $gpg_key\n"
        if ! gpg --keyserver keyserver.ubuntu.com --recv-keys "$gpg_key"; then
            echo -e "\nError: Failed to fetch GPG key $gpg_key.\n"
            exit 1
        fi
    fi
}

gpg_verify() {
    if ! gpg --verify "$sig_file" "$1"; then
        echo -e "\nError: GPG verification failed.\n"
        rm -f "$iso_file" "$sig_file" "$sum_file"
        exit 1
    fi
}

checksum_verify() {
    if ! "$sum_algo" -c --ignore-missing "$sum_file"; then
        echo -e "\nError: $sum_algo verification failed.\n"
        rm -f "$iso_file" "$sig_file" "$sum_file"
        exit 1
    else
        rm -f "$sig_file" "$sum_file"
        echo -e "\n[dl-distro] Download and verification successful.\n"
        exit 0
    fi
}

handle_download_path() {
    if [[ "$download_path" != "$(pwd)" ]]; then
        mkdir -p "$download_path" && cd "$download_path" || exit 1
    fi
}

# Takes an array, displays it to the user and assigns their choice to a variable
# Usage: selected_architecture="$(get_choice "amd64" "arm64")"
# If the user picks amd64, selected_architecture=amd64
get_choice() {
    options=("$@")
    num_options="${#options[@]}"

    while true; do
        echo >&2
        for i in "${!options[@]}"; do
            printf "   %d. %s\n" "$((i+1))" "${options[$i]}" >&2
        done
        echo >&2

        read -rp "Enter your choice (1-$num_options): " user_choice >&2

        if [[ "$user_choice" -ge 1 && "$user_choice" -le "$num_options" ]]; then
            printf "%s" "${options[$user_choice-1]}"
            return 0
        else
            echo -e "\nInvalid choice. Please choose a number 1 to $num_options." >&2
        fi
    done
}

# Fetches values for specific keys from the JSON file
# Assigns the values to variables that our downloading and verifying functions can use
# Example: fetch_and_assign_values "gpg_key" "netinst.amd64.url" "netinst.amd64.iso_file" "sig_file" "sum_file" "sum_algo"
fetch_and_assign_values() {
    keys=("$@")

    # Create a single jq query string to fetch all values
    jq_query="$(printf ".${distro}.%s, " "${keys[@]}")"
    jq_query="${jq_query%, }"  # Remove the trailing comma and space

    # Fetch values using the jq query string into an array
    readarray -t values < <(jq -r "$jq_query" "$json_file")

    # Assign values to variables
    gpg_key="${values[0]}"
    url="${values[1]}"
    iso_file="${values[2]}"
    sig_file="${values[3]}"
    sum_file="${values[4]}"
    sum_algo="${values[5]}"
}

download_arch() {
    fetch_and_assign_values "gpg_key" "url" "iso_file" "sig_file" "sum_file" "sum_algo"
    wget_spider
    handle_download_path
    fetch_gpg_key
    wget_file "$sig_file" "$sum_file" "$iso_file"
    gpg_verify "$iso_file"
    checksum_verify
}

download_debian() {
    installer_type="$(get_choice "net installer" "live installer")"

    if [[ "$installer_type" == "net installer" ]]; then
        selected_architecture="$(get_choice "amd64" "arm64" "armel" "armhf" "i386" "mips64el" "mipsel" "ppc64el" "s390x")"
        fetch_and_assign_values "gpg_key" "netinst.${selected_architecture}.url" "netinst.${selected_architecture}.iso_file" "sig_file" "sum_file" "sum_algo"
    else
        selected_environment="$(get_choice "cinnamon" "gnome" "kde" "lxde" "lxqt" "mate" "standard" "xfce")"
        fetch_and_assign_values "gpg_key" "live.url" "live.${selected_environment}.iso_file" "sig_file" "sum_file" "sum_algo"
    fi

    wget_spider
    handle_download_path
    fetch_gpg_key
    wget_file "$sig_file" "$sum_file"
    gpg_verify "$sum_file"
    wget_file "$iso_file"
    checksum_verify
}

download_kali () {
    installer_type="$(get_choice "kali" "weekly")"
    selected_image="$(get_choice "live" "qemu" "virtualbox" "vmware" "hyperv" "installer" "netinst" "purple")"

    if [[ "$selected_image" == "live" || "$selected_image" == "installer" || "$selected_image" == "netinst" ]]; then
        selected_architecture="$(get_choice "amd64" "arm64" "i386")"
    elif [[ "$selected_image" == "purple" || "$selected_image" == "hyperv" ]]; then
        selected_architecture="amd64"
    else
        if [[ "$installer_type" == "weekly" ]]; then
            selected_architecture="amd64"
        else
            selected_architecture="$(get_choice "amd64" "i386")"
        fi
    fi

    if [[ "$installer_type" == "kali" ]]; then
        fetch_and_assign_values "gpg_key" "current.url" "current.${selected_image}.${selected_architecture}.iso_file" "sig_file" "sum_file" "sum_algo"
    else
        fetch_and_assign_values "gpg_key" "weekly.url" "weekly.${selected_image}.${selected_architecture}.iso_file" "sig_file" "sum_file" "sum_algo"
        html_content="$(wget -qO- "$url")"
        current_week_num="$(echo "$html_content" | grep -o 'W[0-9]\+' | sort -r | head -n1 | cut -c2-)"
        iso_file="${iso_file//\{current_week_num\}/$current_week_num}"

        if ! echo "$html_content" | grep -q "$iso_file"; then
            echo -e "\nNo new ISO for week: $current_week_num. Downloading previous week.\n"
            (( prev_week_num=current_week_num-1 ))
            iso_file="${iso_file//$current_week_num/$prev_week_num}"
        fi
    fi

    wget_spider
    handle_download_path
    fetch_gpg_key
    wget_file "$sig_file" "$sum_file"
    gpg_verify "$sum_file"
    wget_file "$iso_file"
    checksum_verify
}

download_mint () {
    installer_type="$(get_choice "mint" "debian edition")"

    if [[ "$installer_type" == "mint" ]]; then
        selected_environment="$(get_choice "cinnamon" "mate" "xfce")"
        fetch_and_assign_values "gpg_key" "mint.url" "mint.${selected_environment}.iso_file" "sig_file" "sum_file" "sum_algo"
    else
        fetch_and_assign_values "gpg_key" "debian.url" "debian.iso_file" "sig_file" "sum_file" "sum_algo"
    fi

    wget_spider
    handle_download_path
    fetch_gpg_key
    wget_file "$sig_file" "$sum_file"
    gpg_verify "$sum_file"
    wget_file "$iso_file"
    checksum_verify
}

download_ubuntu() {
    installer_type="$(get_choice "current" "lts")"
    selected_image="$(get_choice "desktop" "server")"

    if [[ "$installer_type" == "current" ]]; then
        fetch_and_assign_values "gpg_key" "current.url" "current.${selected_image}.iso_file" "sig_file" "sum_file" "sum_algo"
    else
        fetch_and_assign_values "gpg_key" "lts.url" "lts.${selected_image}.iso_file" "sig_file" "sum_file" "sum_algo"
    fi

    wget_spider
    handle_download_path
    fetch_gpg_key
    wget_file "$sig_file" "$sum_file"
    gpg_verify "$sum_file"
    wget_file "$iso_file"
    checksum_verify
}

check_dependencies() {
    missing_deps=()

    for cmd in wget gpg jq; do
        command -v "$cmd" &> /dev/null || missing_deps+=("$cmd")
    done

    if [[ "${#missing_deps[@]}" -gt 0 ]]; then
        echo -e "\nPlease install: ${missing_deps[*]}.\n"
        exit 1
    else
        return 0
    fi
}

# This function is used with an external Expect script I made
# It checks the sig and sum file for each distro's URL(s) and then every ISO combination possible
# Helps a lot with detecting version and file name changes if I happen to miss an announcement
wget_spider() {
    if [[ "$download_path" != "--spider" ]]; then
        return 0
    fi

    tracked_file="/tmp/dl-distro_tracked.txt"
    tracked_string="${distro}_${installer_type:-}_checked"

    spider_file() {
        local file="$1"
        if ! wget -nv -c --spider "$url/$file"; then
            echo -e "\nError: Failed to download $file.\n"
            exit 1
        fi
    }

    if ! grep -q "$tracked_string" "$tracked_file" 2>/dev/null; then
        spider_file "$sig_file"
        spider_file "$sum_file"
        echo "$tracked_string" >> "$tracked_file"
    fi

    spider_file "$iso_file"
    exit 0
}

usage() {
    cat <<EOF

USAGE:
    dl-distro [distro] [path]

DISTROS:
    arch
    debian
    kali
    mint
    ubuntu

EXAMPLES:
    dl-distro arch
    dl-distro arch /run/media/$USER/Ventoy

EOF
}

dl_distro() {
    distro="${1:-help}"
    download_path="${2:-$(pwd)}"

    case "$distro" in
        -h|--help|help) usage; exit 0 ;;
    esac

    # Try to find the json file in the three known paths
    for path in \
        "$HOME/.config/dl-distro/distro_data.json" \
        "$(dirname "$0")/distro_data.json" \
        "/usr/share/dl-distro/distro_data.json";
    do
        if [[ -f "$path" ]]; then
            json_file="$path"
            break
        fi
    done

    # If json_file is not set, exit with an error
    if [[ -z "$json_file" ]]; then
        echo -e "\nError: distro_data.json not found in any of the expected locations.\n"
        exit 1
    fi

    case "$distro" in
        "arch") download_arch ;;
        "debian") download_debian ;;
        "kali") download_kali ;;
        "mint") download_mint ;;
        "ubuntu") download_ubuntu ;;
        *) echo -e "\nError: Please use -h or --help for usage and supported distros.\n"; exit 1 ;;
    esac
}

check_dependencies
dl_distro "$@"
