#!/usr/bin/env bash
#
#    dl-distro - Bash script for downloading and verifying OS images.
#
#    Copyright (C) 2023-2024 bashuser30 <bashuser30@mailbox.org>
#
#    dl-distro is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    dl-distro is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program. If not, see <https://www.gnu.org/licenses/>.
#

set -euo pipefail

if [[ "$UID" -eq 0 ]]; then
	printf "Do not run as root.\n" >&2
	exit 1
fi

version="v2.0.0"
data_dir="${XDG_DATA_HOME:-$HOME/.local/share}/dl-distro"
conf_dir="${XDG_CONFIG_HOME:-$HOME/.config}/dl-distro"
json_dir="$data_dir/json"
gpg_dir="$data_dir/gpg"
minisign_dir="$data_dir/minisign"
signify_dir="$data_dir/signify"
json_file="$json_dir/data.json"
user_json_file="$conf_dir/data.json"
conf_file="$conf_dir/dl-distro.conf"
default_download_dir="$PWD"
auto_update_enabled="true"
verification_enabled="true"
spider_mode_enabled="false"
gpg_keyserver="hkps://keyserver.ubuntu.com"
json_url="https://codeberg.org/bashuser30/dl-distro/raw/branch/master/data.json"
green=$'\033[1;32m'
red=$'\033[1;31m'
yellow=$'\033[1;33m'
bold=$'\033[1;37m'
und=$'\033[1;4m'
nc=$'\033[0m'
PS3="${bold}>${nc} "

# shellcheck source=/dev/null
[[ -f "$conf_file" ]] && source "$conf_file"
[[ -f "$user_json_file" ]] && json_file="$user_json_file"

declare -A supported_distros

supported_distros=(["AlmaLinux OS"]="alma"
                   ["Alpine Linux"]="alpine"
                   ["Arch Linux"]="arch"
                   ["Debian"]="debian"
                   ["Fedora Linux"]="fedora"
                   ["GParted Live"]="gparted"
                   ["Kali Linux"]="kali"
                   ["Linux Mint"]="mint"
                   ["NixOS"]="nixos"
                   ["OpenBSD"]="openbsd"
                   ["openSUSE"]="opensuse"
                   ["ParrotOS"]="parrot"
                   ["Qubes OS"]="qubes"
                   ["Rocky Linux"]="rocky"
                   ["Slackware Linux"]="slackware"
                   ["Solus"]="solus"
                   ["Tails"]="tails"
                   ["Ubuntu"]="ubuntu"
                   ["Void Linux"]="void"
                   ["Whonix"]="whonix")

print_msg() { printf "%b%s%b\n" "$bold" "$1" "$nc"; }
print_warn() { printf "%bWARNING: %b%s%b\n" "$yellow" "$bold" "$1" "$nc" >&2; }
print_error() { printf "%bERROR: %b%s%b\n" "$red" "$bold" "$1" "$nc" >&2; }

print_version()
{
	print_msg "dl-distro ${green}$version"
	print_msg "Copyright (C) 2023-2024 bashuser30 <bashuser30@mailbox.org>"
}

dependency_check()
{
	missing_deps=()

	for cmd in "$@"; do
		command -v "$cmd" &> /dev/null || missing_deps+=("$cmd")
	done

	if [[ "${#missing_deps[@]}" -gt 0 ]]; then
		print_error "Please install: ${red}${missing_deps[*]}"
		exit 1
	fi
}

wget_file()
{
	local url

	for url in "$@"; do
		if ! wget -qc --show-progress "$url"; then
			print_error "Failed to download: ${red}$url"
			exit 1
		fi
	done
}

wget_spider()
{
	[[ "$spider_mode_enabled" == "false" ]] && return 0

	local url

	for url in "$@"; do
		if ! wget -nvc --spider "$url"; then
			print_error "Spider failed for: ${red}$url"
		fi
	done

	exit 0
}

fetch_gpg_key()
{
	[[ "$verification_enabled" == "false" ]] && return 0

	dependency_check "gpg"

	gpg_key="$(jq -r ".gpg_keys.$1" "$json_file")"

	if ! gpg --homedir "$gpg_dir" --list-keys "$gpg_key" &> /dev/null; then
		print_msg "Fetching GPG key..."

		if ! gpg --homedir "$gpg_dir" --keyserver "$gpg_keyserver" --recv-keys "$gpg_key" &> /dev/null; then
			print_error "Failed to fetch GPG key: ${red}$gpg_key"
			exit 1
		fi
	fi
}

verify_gpg_signature()
{
	[[ "$verification_enabled" == "false" ]] && return 0

	if gpg --homedir "$gpg_dir" --verify "$@" &> /dev/null; then
		print_msg "GPG verification: ${green}SUCCESS"
	else
		rm -f "$iso_file"
		print_error "GPG verification: ${red}FAILED"
		exit 1
	fi
}

fetch_minisign_key()
{
	[[ "$verification_enabled" == "false" ]] && return 0

	dependency_check "minisign"

	minisign_key_url="$(jq -r ".minisign_keys.$distro" "$json_file")"
	minisign_key="$(basename "$minisign_key_url")"

	if [[ ! -f "$minisign_dir/$minisign_key" ]]; then
		print_msg "Fetching Minisign key..."

		if ! wget -P "$minisign_dir" -q "$minisign_key_url"; then
			print_error "Failed to fetch Minisign key: ${red}$minisign_key_url"
			exit 1
		fi
	fi
}

verify_minisign_signature()
{
	[[ "$verification_enabled" == "false" ]] && return 0

	if minisign -Vp "$minisign_dir/$minisign_key" -x "$sig_file" -m "$sum_file" &> /dev/null; then
		print_msg "Minisign verification: ${green}SUCCESS"
	else
		print_error "Minisign verification: ${red}FAILED"
		exit 1
	fi
}

fetch_signify_key()
{
	[[ "$verification_enabled" == "false" ]] && return 0

	if [[ -f /etc/os-release ]]; then
		# shellcheck source=/dev/null
		source /etc/os-release
	else
		print_warn "/etc/os-release is missing."
		print_warn "This is to determine the package name signify uses."
		print_warn "Defaulting to: ${yellow}signify"
	fi

	if [[ "${ID:-}" == "debian" || "${ID_LIKE:-}" =~ debian ]]; then
		signify_name="signify-openbsd"
	else
		signify_name="signify"
	fi

	dependency_check "$signify_name"

	signify_key_url="$(jq -r ".signify_keys.$distro" "$json_file")"
	signify_key="$(basename "$signify_key_url")"

	if [[ ! -f "$signify_dir/$signify_key" ]]; then
		print_msg "Fetching Signify key..."

		if ! wget -P "$signify_dir" -q "$signify_key_url"; then
			print_error "Failed to fetch Signify key: ${red}$signify_key_url"
			exit 1
		fi
	fi
}

verify_signify_signature()
{
	[[ "$verification_enabled" == "false" ]] && return 0

	if "$signify_name" -Vp "$signify_dir/$signify_key" -x "$sig_file" -m "$sum_file" &> /dev/null; then
		print_msg "Signify verification: ${green}SUCCESS"
	else
		print_error "Signify verification: ${red}FAILED"
		exit 1
	fi
}

verify_checksum()
{
	sum_algo="$(jq -r ".sum_algos.$distro" "$json_file")"

	if "$sum_algo" -c --ignore-missing "$sum_file" &> /dev/null; then
		print_msg "$sum_algo verification: ${green}SUCCESS"
	else
		rm -f "$iso_file"
		print_error "$sum_algo verification: ${red}FAILED"
		exit 1
	fi
}

download_alma()
{
	wget_spider "$url"/{"$iso_file","$sig_file"}

	if [[ "$traverse_path" == *"${distro}_8"* ]]; then
		fetch_gpg_key "${distro}_8"
	else
		fetch_gpg_key "${distro}_9"
	fi

	wget_file "$url/$sig_file"
	verify_gpg_signature "$sig_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_alpine()
{
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$sum_file","$iso_file"}
	verify_gpg_signature "$sig_file" "$iso_file"
	verify_checksum
}

download_arch()
{
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$sum_file","$iso_file"}
	verify_gpg_signature "$sig_file" "$iso_file"
	verify_checksum
}

download_debian()
{
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$sum_file"}
	verify_gpg_signature "$sig_file" "$sum_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_fedora()
{
	wget_spider "$url"/{"$iso_file","$sig_file"}

	if [[ "$traverse_path" == *"astronomy"* ]]; then
		fetch_gpg_key "${distro}_38"
	else
		fetch_gpg_key "${distro}_39"
	fi

	wget_file "$url/$sig_file"
	verify_gpg_signature "$sig_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_gparted()
{
	sig_sum_url="$(jq -r ".oddballs.gparted.sig_sum_url" "$json_file")"
	wget_spider "$url/$iso_file" "$sig_sum_url"/{"$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$sig_sum_url"/{"$sig_file","$sum_file"}
	verify_gpg_signature "$sig_file" "$sum_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_kali ()
{
	if [[ "$traverse_path" == *"weekly"* ]]; then
		html_content="$(wget -qO- "$url/")"
		current_week_num="$(grep -o 'W[0-9]\+' <<< "$html_content" | sort -r | head -n 1 | cut -c2-)"
		iso_file="${iso_file//\{current_week_num\}/$current_week_num}"

		if ! grep -qF "$iso_file" <<< "$html_content"; then
			print_warn "No new ISO for week: ${yellow}$current_week_num"
			print_warn "Downloading previous week."
			(( prev_week_num=current_week_num-1 ))
			iso_file="${iso_file//$current_week_num/$prev_week_num}"
		fi
	fi

	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$sum_file"}
	verify_gpg_signature "$sig_file" "$sum_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_mint ()
{
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$sum_file"}
	verify_gpg_signature "$sig_file" "$sum_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_nixos()
{
	wget_spider "$url"/{"$iso_file","$sum_file"}
	wget_file "$url"/{"$sum_file","$iso_file"}
	printf "\n" >> "$sum_file"
	read -r line < "$sum_file"
	new_iso_file="${line##* }"
	mv "$iso_file" "$new_iso_file"
	iso_file="$new_iso_file"
	verify_checksum
	print_msg "NixOS does not provide signatures."
}

download_openbsd()
{
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_signify_key
	wget_file "$url"/{"$sig_file","$sum_file"}
	verify_signify_signature
	wget_file "$url/$iso_file"
	verify_checksum
	IFS="." read -ra path_parts <<< "$traverse_path"
	architecture="${path_parts[3]}"
	base_name="${iso_file%.*}"
	ext="${iso_file##*.}"
	mv "$iso_file" "${base_name}-${architecture}.${ext}"
}

download_opensuse()
{
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$sum_file"}
	verify_gpg_signature "$sig_file" "$sum_file"
	read -r line < "$sum_file"
	iso_file="${line##* }"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_parrot()
{
	wget_spider "$url"/{"$iso_file","$sig_file"}
	fetch_gpg_key "$distro"
	wget_file "$url/$sig_file"
	verify_gpg_signature "$sig_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_qubes()
{
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url/$sum_file"
	verify_gpg_signature "$sum_file"
	wget_file "$url"/{"$sig_file","$iso_file"}
	verify_gpg_signature "$sig_file" "$iso_file"
	verify_checksum
}

download_rocky()
{
	wget_spider "$url"/{"$iso_file","$sum_file"}
	wget_file "$url"/{"$sum_file","$iso_file"}
	verify_checksum
	print_msg "Rocky Linux does not provide signatures."
}

download_slackware()
{
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$sum_file","$iso_file"}
	verify_gpg_signature "$sig_file" "$iso_file"
	verify_checksum
}

download_solus()
{
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$sum_file"}
	verify_gpg_signature "$sig_file" "$sum_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_tails()
{
	wget_spider "$url"/{"$iso_file","$sig_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$iso_file"}
	verify_gpg_signature "$sig_file" "$iso_file"
	print_msg "Tails does not provide checksums."
}

download_ubuntu()
{
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	[[ "$traverse_path" == *"trusty"* ]] && fetch_gpg_key "${distro}_trusty"
	wget_file "$url"/{"$sig_file","$sum_file"}
	verify_gpg_signature "$sig_file" "$sum_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_void()
{
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_minisign_key
	wget_file "$url"/{"$sig_file","$sum_file"}
	verify_minisign_signature
	wget_file "$url/$iso_file"
	verify_checksum
}

download_whonix()
{
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}

	if [[ "$traverse_path" == *"qemu"* ]]; then
		fetch_gpg_key "${distro}_qemu"
	else
		fetch_gpg_key "${distro}_vbox"
	fi

	wget_file "$url"/{"$sig_file","$sum_file","$iso_file"}
	verify_gpg_signature "$sig_file" "$iso_file"
	verify_checksum
}

toggle_auto_update()
{
	if [[ ! -f "$conf_file" ]]; then
		print_error "Config file not found."
		print_msg "Generating a new one..."
		generate_conf_file
	fi

	if [[ "$auto_update_enabled" == "true" ]]; then
		sed -i 's/auto_update_enabled=\(\"true\"\|true\)/auto_update_enabled="false"/' "$conf_file"
		print_msg "JSON auto-updating: ${red}DISABLED"
	else
		sed -i 's/auto_update_enabled=\(\"false\"\|false\)/auto_update_enabled="true"/' "$conf_file"
		print_msg "JSON auto-updating: ${green}ENABLED"
	fi
}

generate_conf_file()
{
	if [[ -f "$conf_file" ]]; then
		print_warn "This will overwrite the config file with default values."

		select gen_conf_choice in "Yes" "No"; do
			case "$gen_conf_choice" in
				"Yes") break ;;
				"No") print_msg "Canceled."; return 0 ;;
				*) print_error "Invalid option: ${red}$REPLY" ;;
			esac
		done
	fi

	{
		# shellcheck disable=SC2016
		printf 'default_download_dir="$PWD"\n'
		printf 'auto_update_enabled="true"\n'
		printf 'verification_enabled="true"\n'
		printf 'spider_mode_enabled="false"\n'
		printf 'gpg_keyserver="hkps://keyserver.ubuntu.com"\n'
	} > "$conf_file"

	print_msg "Made config file at: ${green}$conf_file"
}

delete_gpg_key()
{
	dependency_check "gpg"

	gpg_key_id="${1:-}"

	if [[ -z "$gpg_key_id" ]]; then
		print_error "A GPG key ID is required."
		exit 1
	fi

	if gpg --homedir "$gpg_dir" --yes --batch --delete-keys "$1" &> /dev/null; then
		print_msg "GPG key deletion: ${green}SUCCESS"
	else
		print_error "GPG key deletion: ${red}FAILED"
	fi
}

import_gpg_key()
{
	dependency_check "gpg"

	gpg_key_file="${1:-}"

	if [[ -z "$gpg_key_file" ]]; then
		print_error "A path to a GPG key file is required."
		exit 1
	fi

	if gpg --homedir "$gpg_dir" --import "$gpg_key_file" &> /dev/null; then
		print_msg "GPG key import: ${green}SUCCESS"
	else
		print_error "GPG key import: ${red}FAILED"
	fi
}

list_gpg_keys()
{
	dependency_check "gpg"

	list_keys_output="$(gpg --homedir "$gpg_dir" --list-keys 2> /dev/null)"

	if [[ -z "$list_keys_output" ]]; then
		print_msg "No GPG keys saved."
	else
		printf "%s\n" "$list_keys_output"
	fi
}

purge_all_data()
{
	print_warn "This will remove ALL stored data at: ${yellow}$data_dir"

	select purge_choice in "Yes" "No"; do
		case "$purge_choice" in
			"Yes")
				rm -rf "$data_dir"
				print_msg "Data purge: ${green}SUCCESS"
				break
				;;
			"No")
				print_msg "Canceled."
				break
				;;
			*)
				print_error "Invalid option: ${red}$REPLY"
				;;
		esac
	done
}

update_json_file()
{
	temp_json_file="$json_dir/.temp_data.json"

	if wget -O "$temp_json_file" -q "$json_url"; then
		mv "$temp_json_file" "$json_dir/data.json"
		print_msg "JSON file update: ${green}SUCCESS"
	else
		rm "$temp_json_file"
		print_error "JSON file update: ${red}FAILED"
	fi
}

usage()
{
	cat <<EOF
USAGE
  dl-distro
  dl-distro [OPTIONS]
  dl-distro -d <DISTRO|JSON_QUERY> [OPTIONS]

OPTIONS
  -a, --auto-update                 Toggle auto-updating of the local JSON file.
  -c, --conf-file                   Generate a config file with default values.
  -d, --distro <DISTRO|JSON_QUERY>  Specify a distro by name or a JSON query.
  -D, --delete-key <KEY_ID>         Delete a stored GPG key using its key ID.
  -h, --help                        Display this help message.
  -i, --import-key <KEY_FILE>       Import a GPG key from a key file.
  -l, --list-keys                   List the stored GPG keys.
  -n, --no-verify                   Skip key fetching and verification.
  -p, --path <PATH>                 Download image to specified directory.
  -P, --purge-data                  Purge ALL the stored data.
  -s, --spider                      Return HTTP status code for image's URLs.
  -u, --update-json                 Update the locally stored JSON file.
  -V, --version                     Print dl-distro's current version.

DISTROS
  alma    gparted  opensuse   solus
  alpine  kali     parrot     tails
  arch    mint     qubes      ubuntu
  debian  nixos    rocky      void
  fedora  openbsd  slackware  whonix

EXAMPLES
  dl-distro
  dl-distro -d arch
  dl-distro -d arch.latest -p ~/Downloads
EOF
}

cleanup()
{
	[[ "$spider_mode_enabled" == "true" ]] && return 0
	[[ "$sig_file" != "null" ]] && rm -f "$sig_file"
	[[ "$sum_file" != "null" ]] && rm -f "$sum_file"
}

traverse_json_file()
{
	traverse_path="$1"

	if jq -e "$traverse_path.url" "$json_file" &> /dev/null; then
		mapfile -t json_values < <(jq -r "$traverse_path | .url, .iso_file, .sig_file, .sum_file" "$json_file")

		url="${json_values[0]}"
		iso_file="${json_values[1]}"
		sig_file="${json_values[2]}"
		sum_file="${json_values[3]}"

		trap cleanup EXIT INT TERM

		print_msg "Downloading at: ${green}$default_download_dir"
		download_"$distro"

		exit 0
	else
		if [[ -n "${json_query:-}" ]]; then
			print_error "Invalid JSON query: ${red}${traverse_path#.}"
			exit 1
		fi

		mapfile -t json_keys < <(jq -r "$traverse_path | keys | .[]" "$json_file")

		json_options=("${json_keys[@]}" "back")

		if [[ "${#json_options[@]}" -le 1 ]]; then
			print_error "JSON parsing error."
			print_msg "Try udating the JSON file, else report on Codeberg."
			exit 1
		fi

		clear -x

		for key in "${!supported_distros[@]}"; do
			if [[ "${supported_distros[$key]}" == "$distro" ]]; then
				print_msg "${bold}${und}$key"
				break
			fi
		done

		select json_choice in "${json_options[@]}"; do
			case "$json_choice" in
				"back")
					if [[ "$traverse_path" == ".$distro" ]]; then
						main_menu
					else
						traverse_json_file "${traverse_path%.*}"
					fi
					;;
				*)
					if [[ -z "$json_choice" ]]; then
						print_error "Invalid option: ${red}$REPLY"
						continue
					else
						traverse_json_file "$traverse_path.$json_choice"
					fi
					;;
			esac
		done
	fi
}

main_menu()
{
	mapfile -t sorted_distros < <(printf "%s\n" "${!supported_distros[@]}" | sort)

	clear -x

	print_msg "${bold}${und}Main Menu"

	select main_menu_choice in "${sorted_distros[@]}"; do
		if [[ -z "$main_menu_choice" ]]; then
			print_error "Invalid option: ${red}$REPLY"
			continue
		fi

		distro="${supported_distros["$main_menu_choice"]}"
		wait
		traverse_json_file ".$distro"
	done
}

cli_mode()
{
	if [[ "$d_option_arg" == *.* ]]; then
		json_query="$d_option_arg"
		distro="${d_option_arg%%.*}"
	else
		distro="$d_option_arg"
	fi

	if type download_"$distro" &> /dev/null; then
		wait
		traverse_json_file ".${json_query:-$distro}"
	else
		print_error "Invalid distro: ${red}$distro"
		exit 1
	fi
}

parse_opts()
{
	cli_mode=0

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			-a|--auto-update) toggle_auto_update; exit 0 ;;
			-c|--conf-file) generate_conf_file; exit 0 ;;
			-d|--distro)
				if [[ -n "${2:-}" ]]; then
					d_option_arg="$2"
					cli_mode=1
					shift 2
				else
					print_error "$1 requires a distro name or JSON query."
					exit 1
				fi
				;;
			-D|--delete-key) delete_gpg_key "${2:-}"; exit 0 ;;
			-h|--help) usage; exit 0 ;;
			-i|--import-key) import_gpg_key "${2:-}"; exit 0 ;;
			-l|--list-keys) list_gpg_keys; exit 0 ;;
			-n|--no-verify) verification_enabled="false"; shift 1 ;;
			-p|--path)
				if [[ -n "${2:-}" ]]; then
					default_download_dir="$2"
					shift 2
				else
					print_error "$1 requires a directory path."
					exit 1
				fi
				;;
			-P|--purge-data) purge_all_data; exit 0 ;;
			-s|--spider) spider_mode_enabled="true"; shift 1 ;;
			-u|--update-json) update_json_file; exit 0 ;;
			-V|--version) print_version; exit 0 ;;
			*) print_error "Invalid option: ${red}$1"; exit 1 ;;
		esac
	done
}

main()
{
	dependency_check "jq" "wget"

	mkdir -p "$conf_dir" "$json_dir" "$gpg_dir" "$minisign_dir" "$signify_dir"
	chmod 700 "$gpg_dir"

	parse_opts "$@"

	if [[ ! -f "$json_file" || "$auto_update_enabled" == "true" ]]; then
		update_json_file > /dev/null &
	fi

	mkdir -p "$default_download_dir"
	cd "$default_download_dir" || exit 1

	if [[ "$cli_mode" = 0 ]]; then
		main_menu
	else
		cli_mode
	fi
}

main "$@"
