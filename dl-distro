#!/usr/bin/env bash
#
#     dl-distro
#     Copyright (C) 2023  bashuser30 <bashuser30 at mailbox dot org>
#
#     This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -euo pipefail

# Downloads files listed in "$@" using wget; exits on failure. Usage: wget_file "$sig_file" "$sum_file"
wget_file() {
    for file in "$@"; do
        if ! wget -qc --show-progress "$url/$file"; then
            echo -e "\nError: Failed to download $file.\n"
            exit 1
        fi
    done
}

# Checks for the GPG key needed, fetches it if missing; exits on failure
fetch_gpg_key() {
    if ! gpg --list-keys "$gpg_key" &> /dev/null; then
        echo -e "\nFetching GPG key: $gpg_key\n"
        if ! gpg --keyserver keyserver.ubuntu.com --recv-keys "$gpg_key"; then
            echo -e "\nError: Failed to fetch GPG key $gpg_key.\n"
            exit 1
        fi
    fi
}

# Verifies a file using its GPG signature; deletes files and exits on failure.
# Usage:
# - gpg_verify
# - gpg_verify "$sum_file"
gpg_verify() {
    if [[ -z "${1:-}" ]]; then
        if ! gpg --verify "$sig_file"; then
            echo -e "\nError: GPG verification failed.\n"
            rm -f "$iso_file" "$sig_file" "$sum_file"
            exit 1
        fi
    else
        if ! gpg --verify "$sig_file" "$1"; then
            echo -e "\nError: GPG verification failed.\n"
            rm -f "$iso_file" "$sig_file" "$sum_file"
            exit 1
        fi
    fi
}

# Verifies a file using its checksum; deletes files and exits based on success/failure
checksum_verify() {
    if ! "$sum_algo" -c --ignore-missing "$sum_file" 2>/dev/null; then
        echo -e "\nError: $sum_algo verification failed.\n"
        rm -f "$iso_file" "$sig_file" "$sum_file"
        exit 1
    else
        rm -f "$sig_file" "$sum_file"
        echo -e "\n[dl-distro] Download and verification successful.\n"
        exit 0
    fi
}

# Ensures the specified download path exists and changes to it; exits on failure
handle_download_path() {
    if [[ "$download_path" != "$(pwd)" ]]; then
        mkdir -p "$download_path" && cd "$download_path" || exit 1
    fi
}

# Presents a list of options to the user and returns their selected choice
# Usage: selected_option="$(get_choice "option1" "option2" ...)"
# Example: If user selects "amd64", then selected_option="amd64"
get_choice() {
    options=("$@")
    num_options="${#options[@]}"

    while true; do
        echo >&2
        for i in "${!options[@]}"; do
            printf "   %d. %s\n" "$((i+1))" "${options[$i]}" >&2
        done
        echo >&2

        read -rp "Enter your choice (1-$num_options): " user_choice >&2

        if [[ "$user_choice" -ge 1 && "$user_choice" -le "$num_options" ]]; then
            printf "%s" "${options[$user_choice-1]}"
            return 0
        else
            echo -e "\nInvalid choice. Please choose a number 1 to $num_options." >&2
        fi
    done
}

# Fetches and assigns specific values from a JSON file to global variables
# Keys provided should match the desired sequence of variable assignments
# Usage: fetch_and_assign_values "key1" "key2" ...
# Example: fetch_and_assign_values "gpg_key" "netinst.amd64.url" ...
fetch_and_assign_values() {
    keys=("$@")

    # Create a single jq query string to fetch all values and remove the trailing comma and space
    jq_query="$(printf ".${distro}.%s, " "${keys[@]}")"
    jq_query="${jq_query%, }"

    # Fetch values using the jq query string into an array
    readarray -t values < <(jq -r "$jq_query" "$json_file")

    # Assign values to variables
    gpg_key="${values[0]}"
    url="${values[1]}"
    iso_file="${values[2]}"
    sig_file="${values[3]}"
    sum_file="${values[4]}"
    sum_algo="${values[5]}"
}

# Checks the iso, sig, and sum file for the chosen combination
wget_spider() {
    if [[ "$download_path" != "--spider" ]]; then
        return 0
    fi

    for file in "$iso_file" "$sig_file" "$sum_file"; do
        if ! wget -nvc --spider "$url/$file"; then
            echo -e "\nError: Failed to download $file.\n"
            exit 1
        fi
    done

    exit 0
}

download_arch() {
    fetch_and_assign_values "gpg_key" \
                            "url" \
                            "iso_file" \
                            "sig_file" \
                            "sum_file" \
                            "sum_algo"

    wget_spider
    handle_download_path
    fetch_gpg_key
    wget_file "$sig_file" "$sum_file" "$iso_file"
    gpg_verify "$iso_file"
    checksum_verify
}

download_debian() {
    installer_type="$(get_choice "netinst" "live")"

    if [[ "$installer_type" == "netinst" ]]; then
        selected_architecture="$(get_choice "amd64" "arm64" "armel" "armhf" "i386" "mips64el" "mipsel" "ppc64el" "s390x")"
        fetch_and_assign_values "gpg_key" \
                                "netinst.${selected_architecture}.url" \
                                "netinst.${selected_architecture}.iso_file" \
                                "sig_file" \
                                "sum_file" \
                                "sum_algo"
    else
        selected_environment="$(get_choice "cinnamon" "gnome" "kde" "lxde" "lxqt" "mate" "standard" "xfce")"
        fetch_and_assign_values "gpg_key" \
                                "live.url" \
                                "live.${selected_environment}.iso_file" \
                                "sig_file" \
                                "sum_file" \
                                "sum_algo"
    fi

    wget_spider
    handle_download_path
    fetch_gpg_key
    wget_file "$sig_file" "$sum_file"
    gpg_verify "$sum_file"
    wget_file "$iso_file"
    checksum_verify
}

download_fedora() {
    installer_type="$(get_choice "everything" "server" "silverblue" "spins" "workstation")"

    if [[ "$installer_type" == "everything" ]]; then
        selected_architecture="$(get_choice "x86_64" "aarch64")"
        fetch_and_assign_values "gpg_key" \
                                "everything.${selected_architecture}.url" \
                                "everything.${selected_architecture}.iso_file" \
                                "everything.${selected_architecture}.sig_file" \
                                "everything.${selected_architecture}.sum_file" \
                                "sum_algo"

    elif [[ "$installer_type" == "server" ]]; then
        selected_architecture="$(get_choice "x86_64" "aarch64")"
        image_type="$(get_choice "standard" "vm")"

        if [[ "$image_type" == "standard" ]]; then
            install_method="$(get_choice "dvd" "netinst")"
            fetch_and_assign_values "gpg_key" \
                                    "server.${selected_architecture}.${image_type}.url" \
                                    "server.${selected_architecture}.${image_type}.${install_method}.iso_file" \
                                    "server.${selected_architecture}.sig_file" \
                                    "server.${selected_architecture}.sum_file" \
                                    "sum_algo"
        else
            fetch_and_assign_values "gpg_key" \
                                    "server.${selected_architecture}.${image_type}.url" \
                                    "server.${selected_architecture}.${image_type}.iso_file" \
                                    "server.${selected_architecture}.sig_file" \
                                    "server.${selected_architecture}.sum_file" \
                                    "sum_algo"
        fi
    elif [[ "$installer_type" == "silverblue" ]]; then
        fetch_and_assign_values "gpg_key" \
                                "silverblue.url" \
                                "silverblue.iso_file" \
                                "silverblue.sig_file" \
                                "silverblue.sum_file" \
                                "sum_algo"

    elif [[ "$installer_type" == "spins" ]]; then
        selected_environment="$(get_choice "budgie" "cinnamon" "kde" "lxde" "lxqt" "mate" "sugar" "sway" "xfce" "i3")"
        fetch_and_assign_values "gpg_key" \
                                "spins.url" \
                                "spins.${selected_environment}.iso_file" \
                                "spins.sig_file" \
                                "spins.sum_file" \
                                "sum_algo"
    else
        selected_architecture="$(get_choice "x86_64" "aarch64")"
        fetch_and_assign_values "gpg_key" \
                                "workstation.${selected_architecture}.url" \
                                "workstation.${selected_architecture}.iso_file" \
                                "workstation.${selected_architecture}.sig_file" \
                                "workstation.${selected_architecture}.sum_file" \
                                "sum_algo"
    fi

    wget_spider
    handle_download_path
    fetch_gpg_key
    wget_file "$sig_file"
    gpg_verify
    wget_file "$iso_file"
    checksum_verify
}

download_kali () {
    installer_type="$(get_choice "current" "weekly")"
    selected_image="$(get_choice "live" "qemu" "virtualbox" "vmware" "hyperv" "installer" "netinst" "purple")"

    if [[ "$selected_image" == "live" || "$selected_image" == "installer" || "$selected_image" == "netinst" ]]; then
        selected_architecture="$(get_choice "amd64" "arm64" "i386")"
    elif [[ "$selected_image" == "purple" || "$selected_image" == "hyperv" ]]; then
        selected_architecture="amd64"
    else
        # This is for all VM images (besides hyperv currently). For weekly builds, default to "amd64".
        if [[ "$installer_type" == "weekly" ]]; then
            selected_architecture="amd64"
        else
            selected_architecture="$(get_choice "amd64" "i386")"
        fi
    fi

    fetch_and_assign_values "gpg_key" \
                            "${installer_type}.url" \
                            "${installer_type}.${selected_image}.${selected_architecture}.iso_file" \
                            "sig_file" \
                            "sum_file" \
                            "sum_algo"

    if [[ "$installer_type" == "weekly" ]]; then
        # Fetch the week number from the URL for weekly builds
        html_content="$(wget -qO- "$url")"
        current_week_num="$(echo "$html_content" | grep -o 'W[0-9]\+' | sort -r | head -n1 | cut -c2-)"
        iso_file="${iso_file//\{current_week_num\}/$current_week_num}"

        # If the specified ISO is not available for the current week, default to the previous week's ISO
        if ! echo "$html_content" | grep -q "$iso_file"; then
            echo -e "\nNo new ISO for week: $current_week_num. Downloading previous week.\n"
            (( prev_week_num=current_week_num-1 ))
            iso_file="${iso_file//$current_week_num/$prev_week_num}"
        fi
    fi

    wget_spider
    handle_download_path
    fetch_gpg_key
    wget_file "$sig_file" "$sum_file"
    gpg_verify "$sum_file"
    wget_file "$iso_file"
    checksum_verify
}

download_mint () {
    installer_type="$(get_choice "mint" "debian edition")"

    if [[ "$installer_type" == "mint" ]]; then
        selected_environment="$(get_choice "cinnamon" "mate" "xfce" "edge")"
        fetch_and_assign_values "gpg_key" \
                                "mint.url" \
                                "mint.${selected_environment}.iso_file" \
                                "sig_file" \
                                "sum_file" \
                                "sum_algo"
    else
        selected_architecture="$(get_choice "64-bit" "32-bit")"
        fetch_and_assign_values "gpg_key" \
                                "debian.url" \
                                "debian.\"${selected_architecture}\".iso_file" \
                                "sig_file" \
                                "sum_file" \
                                "sum_algo"
    fi

    wget_spider
    handle_download_path
    fetch_gpg_key
    wget_file "$sig_file" "$sum_file"
    gpg_verify "$sum_file"
    wget_file "$iso_file"
    checksum_verify
}

download_opensuse() {
    installer_type="$(get_choice "leap" "tumbleweed")"
    image_type="$(get_choice "standard" "vm")"

    if [[ "$image_type" == "standard" ]]; then
        install_method="$(get_choice "dvd" "netinst")"

        if [[ "$installer_type" == "leap" ]]; then
            selected_architecture="$(get_choice "x86_64" "aarch64" "ppc64le" "s390x")"
        else
            selected_architecture="$(get_choice "x86_64" "i586" "aarch64" "ppc64le" "s390x" "ppc64")"
        fi

	fetch_and_assign_values "gpg_key" \
                                "${installer_type}.standard.${install_method}.${selected_architecture}.url" \
                                "${installer_type}.standard.${install_method}.${selected_architecture}.iso_file" \
                                "${installer_type}.standard.${install_method}.${selected_architecture}.sig_file" \
                                "${installer_type}.standard.${install_method}.${selected_architecture}.sum_file" \
                                "sum_algo"
    else
        vm_type="$(get_choice "kvm" "hyperv" "vmware" "cloud")"

        if [[ "$vm_type" == "kvm" || "$vm_type" == "hyperv" || "$vm_type" == "cloud" ]]; then
            selected_architecture="$(get_choice "x86_64" "aarch64")"
        else
            selected_architecture="x86_64"
        fi

        fetch_and_assign_values "gpg_key" \
                                "${installer_type}.vm.${vm_type}.${selected_architecture}.url" \
                                "${installer_type}.vm.${vm_type}.${selected_architecture}.iso_file" \
                                "${installer_type}.vm.${vm_type}.${selected_architecture}.sig_file" \
                                "${installer_type}.vm.${vm_type}.${selected_architecture}.sum_file" \
                                "sum_algo"
    fi

    wget_spider
    handle_download_path
    fetch_gpg_key
    wget_file "$sig_file" "$sum_file"
    gpg_verify "$sum_file"

    # Ensures we download the filename located in the $sum_file
    read -r line < "$sum_file"
    iso_file="${line##* }"

    wget_file "$iso_file"
    checksum_verify
}

download_ubuntu() {
    installer_type="$(get_choice "current" "lts")"
    selected_image="$(get_choice "desktop" "server")"

    fetch_and_assign_values "gpg_key" \
                            "${installer_type}.url" \
                            "${installer_type}.${selected_image}.iso_file" \
                            "sig_file" \
                            "sum_file" \
                            "sum_algo"

    wget_spider
    handle_download_path
    fetch_gpg_key
    wget_file "$sig_file" "$sum_file"
    gpg_verify "$sum_file"
    wget_file "$iso_file"
    checksum_verify
}

download_whonix() {
    installer_type="$(get_choice "qemu" "virtualbox")"
    fetch_and_assign_values "${installer_type}.gpg_key" \
                            "${installer_type}.url" \
                            "${installer_type}.iso_file" \
                            "${installer_type}.sig_file" \
                            "${installer_type}.sum_file" \
                            "sum_algo"

    wget_spider
    handle_download_path
    fetch_gpg_key
    wget_file "$sig_file" "$sum_file" "$iso_file"
    gpg_verify "$iso_file"
    checksum_verify
}

usage() {
    cat <<EOF

    dl-distro  Copyright (C) 2023  bashuser30 <bashuser30 at mailbox dot org>
    This program comes with ABSOLUTELY NO WARRANTY.
    This is free software, and you are welcome to redistribute it under certain conditions.

    USAGE:
        dl-distro [distro] [path | --spider]

    OPTIONS:
        --spider     Use wget --spider to check if the file exists without actually downloading it.
        --help|-h    Display usage.

    DISTROS:
        arch
        debian
        fedora
        kali
        mint
        opensuse
        ubuntu
        whonix

    EXAMPLES:
        dl-distro arch
        dl-distro arch /run/media/$USER/Ventoy
        dl-distro arch --spider
        dl-distro -h

EOF
}

check_dependencies() {
    # Initialize an array to hold missing dependencies
    missing_deps=()

    # Check for the presence of each required dependency
    for cmd in wget gpg jq; do
        command -v "$cmd" &> /dev/null || missing_deps+=("$cmd")
    done

    # If there are missing dependencies, notify the user and exit
    if [[ "${#missing_deps[@]}" -gt 0 ]]; then
        echo -e "\nPlease install: ${missing_deps[*]}.\n"
        exit 1
    else
        return 0
    fi
}

dl_distro() {
    distro="${1:-help}"
    download_path="${2:-$(pwd)}"

    # Handle help request
    case "$distro" in
        -h|--help|help) usage; exit 0 ;;
    esac

    # Search for the distro data JSON in the predefined paths
    for path in \
        "$HOME/.config/dl-distro/distro_data.json" \
        "$(dirname "$0")/distro_data.json" \
        "/usr/share/dl-distro/distro_data.json";
    do
        if [[ -f "$path" ]]; then
            json_file="$path"
            break
        fi
    done

    # Exit if the JSON data file wasn't found
    if [[ -z "$json_file" ]]; then
        echo -e "\nError: distro_data.json not found in any of the expected locations.\n"
        exit 1
    fi

    # Delegate to the appropriate download function based on the chosen distro
    case "$distro" in
        "arch") download_arch ;;
        "debian") download_debian ;;
        "fedora") download_fedora ;;
        "kali") download_kali ;;
        "mint") download_mint ;;
        "opensuse") download_opensuse ;;
        "ubuntu") download_ubuntu ;;
        "whonix") download_whonix ;;
        *) echo -e "\nError: Please use -h or --help for usage and supported distros.\n"; exit 1 ;;
    esac
}

check_dependencies
dl_distro "$@"
