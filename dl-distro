#!/usr/bin/env bash
# https://codeberg.org/codeberge/dl-distro/src/branch/master/README.md

set -euo pipefail

download_and_verify_iso() {

    if [[ "$download_path" == "--spider" ]]; then
        if ! wget -nv -c --spider "$url/$iso_file"; then
            echo -e "\nFailed to download $iso_file.\n"
            exit 1
	else
            exit 0
        fi
    fi

    if [[ "$download_path" != "$(pwd)" ]]; then
        mkdir -p "$download_path" || { echo "Failed to create directory $download_path"; exit 1; }
        cd "$download_path" || { echo "Failed to change directory to $download_path"; exit 1; }
    fi

    if ! gpg --list-keys "$gpg_key" &> /dev/null; then
        echo -e "Fetching GPG key: $gpg_key\n"
        if ! gpg --keyserver keyserver.ubuntu.com --recv-keys "$gpg_key"; then
            echo -e "\nError: Failed to fetch GPG key $gpg_key.\n"
            exit 1
        fi
    fi

    if [[ "$distro" != "arch" ]]; then
        for file in "$sig_file" "$sum_file"; do
            if ! wget -q --show-progress -c "$url/$file"; then
                echo -e "\nFailed to download $file.\n"
                exit 1
            fi
        done
    else
        for file in "$sig_file" "$sum_file" "$iso_file"; do
            if ! wget -q --show-progress -c "$url/$file"; then
                echo -e "\nFailed to download $file.\n"
                exit 1
            fi
        done
    fi

    if [[ "$distro" != "arch" ]]; then
        if ! gpg --verify "$sig_file" "$sum_file"; then
            echo -e "\nGPG verification failed.\n"
            rm -f "$sig_file" "$sum_file"
            exit 1
        fi
    else
        if ! gpg --verify "$sig_file" "$iso_file"; then
            echo -e "\nGPG verification failed.\n"
            rm -f "$iso_file" "$sig_file" "$sum_file"
            exit 1
        fi
    fi

    if [[ "$distro" != "arch" ]]; then
        if ! wget -q --show-progress -c "$url/$iso_file"; then
            echo -e "\nFailed to download $iso_file.\n"
            exit 1
        fi
    fi

    if ! "$sum_algo" -c --ignore-missing "$sum_file"; then
        echo -e "\n$sum_algo verification failed.\n"
        rm -f "$iso_file" "$sig_file" "$sum_file"
        exit 1
    fi

    rm -f "$sig_file" "$sum_file"
    echo -e "\nDownload and verification succeeded.\n"

    return 0

}

# Takes an array, displays it to the user and assigns their choice to a variable
# Usage: selected_architecture="$(get_choice "amd64" "arm64")"
# If the user picks amd64, selected_architecture=amd64
# Automatically assigns the variable if called with a single choice: selected_architecture="$(get_choice "amd64")"
get_choice() {

    options=("$@")
    num_options="${#options[@]}"

    if [[ "$num_options" -eq 1 ]]; then
        printf "%s" "${options[0]}"
        return
    fi

    while true; do

        echo >&2

        for i in "${!options[@]}"; do
            printf "   %d. %s\n" "$((i+1))" "${options[$i]}" >&2
        done

        echo >&2

        read -rp "Enter your choice (1-$num_options): " user_choice >&2

        if [[ "$user_choice" -ge 1 && "$user_choice" -le "$num_options" ]]; then
            printf "%s" "${options[$user_choice-1]}"
            return
        else
            echo -e "\nInvalid choice. Please choose a number 1 to $num_options." >&2
        fi

    done

}

# Fetches values for specific keys from the JSON file using readarray
# Assigns the values to variables that download_and_verify_iso() can use
# Usage: fetch_and_assign_values "version" "gpg_key" "url" "iso_file" "sig_file" "sum_file" "sum_algo"
fetch_and_assign_values() {

    keys=("$@")

    # Convert the keys array into a comma-separated string
    jq_query="$(printf ".${distro}.%s, " "${keys[@]}")"
    jq_query="${jq_query%, }"  # Remove the trailing comma

    # Fetch values using the jq query string
    readarray -t values < <(jq -r "${jq_query}" "$json_file")

    version="${values[0]}"
    gpg_key="${values[1]}"
    url="${values[2]}"
    iso_file="${values[3]}"
    sig_file="${values[4]}"
    sum_file="${values[5]}"
    sum_algo="${values[6]}"

}

# Replaces placeholders that are present in the JSON file
# {selected_architecture} for example would be replaced with $selected_architecture
# Usage: replace_placeholders url iso_file
replace_placeholders() {

    # Variables to be replaced are passed as arguments
    vars_with_placeholders=("$@")

    declare -A replacements

    # Only add to the replacements array if the value is set and non-empty
    [[ -n "${version:-}" ]] && replacements["\{version\}"]="$version"
    [[ -n "${selected_architecture:-}" ]] && replacements["\{selected_architecture\}"]="$selected_architecture"
    [[ -n "${selected_environment:-}" ]] && replacements["\{selected_environment\}"]="$selected_environment"
    [[ -n "${selected_image:-}" ]] && replacements["\{selected_image\}"]="$selected_image"
    [[ -n "${file_version:-}" ]] && replacements["\{file_version\}"]="$file_version"
    [[ -n "${current_week_num:-}" ]] && replacements["\{current_week_num\}"]="$current_week_num"
    [[ -n "${ext:-}" ]] && replacements["\{ext\}"]="$ext"

    for var_name in "${vars_with_placeholders[@]}"; do

        if [[ -n ${!var_name} ]]; then

            local -n target_string="$var_name"

            for key in "${!replacements[@]}"; do
                target_string="${target_string//${key}/${replacements[$key]}}"
            done

        fi

    done

}

download_arch() {

    fetch_and_assign_values "version" "gpg_key" "url" "iso_file" "sig_file" "sum_file" "sum_algo"
    replace_placeholders url iso_file sig_file
    download_and_verify_iso

}

download_debian() {

    installer_type="$(get_choice "Net Installer" "Live Installer")"

    case "$installer_type" in

        "Net Installer")

            selected_architecture="$(get_choice "amd64" "arm64" "armel" "armhf" "i386" "mips64el" "mipsel" "ppc64el" "s390x")"

            fetch_and_assign_values "version" "gpg_key" "net_installer.url" "net_installer.iso_file" "sig_file" "sum_file" "sum_algo"

            replace_placeholders url iso_file ;;

        "Live Installer")

            selected_environment="$(get_choice "cinnamon" "gnome" "kde" "lxde" "lxqt" "mate" "standard" "xfce")"

            fetch_and_assign_values "version" "gpg_key" "live_installer.url" "live_installer.iso_file" "sig_file" "sum_file" "sum_algo"

            replace_placeholders url iso_file ;;

    esac

    download_and_verify_iso

}

download_kali() {

    installer_type="$(get_choice "Kali" "Kali Weekly")"
    selected_image="$(get_choice "live" "qemu" "virtualbox" "vmware" "hyperv" "installer" "installer-netinst" "installer-purple")"

    case "$selected_image" in

        "live"|"installer"|"installer-netinst") selected_architecture="$(get_choice "amd64" "arm64" "i386")"; ext="iso" ;;
        "installer-purple")                     selected_architecture="$(get_choice "amd64")";                ext="iso" ;;
        "hyperv")                               selected_architecture="$(get_choice "amd64")";                ext="7z" ;;
        *)
           if [[ "$installer_type" == "Kali Weekly" ]]; then
               selected_architecture="$(get_choice "amd64")"
           else
               selected_architecture="$(get_choice "amd64" "i386")"
           fi
           ext="7z" ;;

    esac

    if [[ "$installer_type" == "Kali" ]]; then

        fetch_and_assign_values "version" "gpg_key" "standard.url" "standard.iso_file" "sig_file" "sum_file" "sum_algo"

        # Patches filename from example: 2023.3 > 2023.3a
        # Comment out the type_to_patch array when there aren't any patches
        declare -A type_to_patch
        #type_to_patch=( ["hyperv"]="a" ["installer"]="a" ["installer-netinst"]="a" ["installer-purple"]="a" )

        file_version="$version"

        if [[ -v type_to_patch["$selected_image"] ]]; then
            patch="${type_to_patch[$selected_image]}"
            file_version+="$patch"
        fi

        replace_placeholders iso_file

    else

        fetch_and_assign_values "version" "gpg_key" "weekly.url" "weekly.iso_file" "sig_file" "sum_file" "sum_algo"

        # wget the weekly url and grab the current weeks number, this ensures no timezone issues, was using date command before
        # grep the html_content for the iso_file, fall back to previous week if it doesn't exist
        html_content="$(wget -qO- "$url")"
        current_week_num="$(echo "$html_content" | grep -o 'W[0-9]\+' | sort -r | head -n1 | cut -c2-)"

        replace_placeholders iso_file

        if ! echo "$html_content" | grep -q "$iso_file"; then

            echo -e "No new ISO for week: $current_week_num. Downloading previous week.\n"
            (( prev_week_num=current_week_num-1 ))
            iso_file="${iso_file//$current_week_num/$prev_week_num}"

        fi

    fi

    download_and_verify_iso

}

download_mint() {

    installer_type="$(get_choice "Mint" "Mint Debian Edition")"

    if [[ "$installer_type" == "Mint" ]]; then

        selected_environment="$(get_choice "cinnamon" "mate" "xfce")"

        fetch_and_assign_values "standard.version" "gpg_key" "standard.url" "standard.iso_file" "sig_file" "sum_file" "sum_algo"

        replace_placeholders url iso_file

    else

        fetch_and_assign_values "debian_edition.version" "gpg_key" "debian_edition.url" "debian_edition.iso_file" "sig_file" "sum_file" "sum_algo"

        replace_placeholders iso_file

    fi

    download_and_verify_iso

}

download_ubuntu() {

    installer_type="$(get_choice "Ubuntu" "Ubuntu LTS")"
    selected_image="$(get_choice "desktop" "live-server")"

    if [[ "$installer_type" == "Ubuntu" ]]; then

        fetch_and_assign_values "standard.version" "gpg_key" "url" "iso_file" "sig_file" "sum_file" "sum_algo"

    else

        fetch_and_assign_values "lts.version" "gpg_key" "url" "iso_file" "sig_file" "sum_file" "sum_algo"

    fi

    replace_placeholders url iso_file

    download_and_verify_iso

}

check_dependencies() {

    for cmd in wget gpg jq; do
        if ! command -v "$cmd" &> /dev/null; then
            echo "The following dependency is missing: $cmd"
            echo "Please install it and rerun the script."
            exit 1
        fi
    done

}

usage() {

    cat <<EOF

USAGE:
    dl-distro <distro> [path]

DISTROS:
    arch
    debian
    kali
    mint
    ubuntu

EXAMPLES:
    dl-distro arch
    dl-distro arch /run/media/$USER/Ventoy

EOF

}

dl_distro() {

    distro="${1:-help}"
    download_path="${2:-$(pwd)}"

    if [[ "$distro" == "-h" || "$distro" == "--help" || "$distro" == "help" ]]; then
        usage
        exit 0
    fi

    if [[ -f "$HOME/.config/dl-distro/distro_data.json" ]]; then
        json_file="$HOME/.config/dl-distro/distro_data.json"
    elif [[ -f "/usr/share/dl-distro/distro_data.json" ]]; then
        json_file="/usr/share/dl-distro/distro_data.json"
    elif [[ -f "$(dirname "$0")/distro_data.json" ]]; then
        json_file="$(dirname "$0")/distro_data.json"
    else
        echo "Error: distro_data.json not found in any of the expected locations."
        exit 1
    fi

    case "$distro" in

        "arch") download_arch ;;
        "debian") download_debian ;;
        "kali") download_kali ;;
        "mint") download_mint ;;
        "ubuntu") download_ubuntu ;;
        *) echo "Error: Please use -h or --help for usage and supported distros."; exit 1 ;;

    esac

}

check_dependencies
dl_distro "$@"
