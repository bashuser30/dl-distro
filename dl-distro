#!/usr/bin/env bash
#
# dl-distro - Bash script for downloading and verifying OS images.
#
# Copyright (C) 2023-2024 bashuser30 <bashuser30 at mailbox dot org>
#
# dl-distro is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# dl-distro is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with dl-distro. If not, see <http://www.gnu.org/licenses/>.

set -euo pipefail

print_error_and_exit() {
	printf "[dl-distro] ERROR: %s\n" "$1" >&2
	exit 1
}

print_warning() {
	printf "[dl-distro] WARNING: %s\n" "$1" >&2
}

print_message() {
	printf "[dl-distro] %s\n" "$1"
}

wget_file() {
	local url

	for url in "$@"; do
		if ! wget -P "$download_path" -qc --show-progress "$url"; then
			print_error_and_exit "Failed to download: $url"
		fi
	done
}

wget_spider() {
	[[ "$spider_mode_enabled" == "false" ]] && return 0

	local url

	for url in "$@"; do
		if ! wget -nvc --spider "$url"; then
			print_error_and_exit "Spider failed for: $url"
		fi
	done

	exit 0
}

fetch_gpg_key() {
	[[ "$verification_enabled" == "false" ]] && return 0

	[[ ! -d "$data_dir" ]] && mkdir -p "$data_dir"

	gpg_key="$(jq -r ".gpg_keys.$1" "$json_file")"
	gpg_dir_perms="$(stat -c "%a" "$data_dir")"

	[[ "$gpg_dir_perms" != "700" ]] && chmod 700 "$data_dir"

	if ! gpg --homedir "$data_dir" --list-keys "$gpg_key" &> /dev/null; then
		print_message "Fetching GPG key."

		if ! gpg --homedir "$data_dir" --keyserver hkps://keyserver.ubuntu.com --recv-keys "$gpg_key" &> /dev/null; then
			print_error_and_exit "Failed to fetch GPG key: $gpg_key"
		fi
	fi
}

fetch_minisign_key() {
	[[ "$verification_enabled" == "false" ]] && return 0

	minisign_key_url="$(jq -r ".minisign_keys.$distro" "$json_file")"
	minisign_key="$(basename "$minisign_key_url")"
	minisign_dir="$data_dir/minisign_keys"

	if [[ ! -f "$minisign_dir/$minisign_key" ]]; then
		print_message "Fetching Minisign key."

		if ! wget -P "$minisign_dir" -q "$minisign_key_url"; then
			print_error_and_exit "Failed to fetch Minisign key from: $minisign_key_url"
		fi
	fi
}

fetch_signify_key() {
	[[ "$verification_enabled" == "false" ]] && return 0

	if [[ -f /etc/os-release ]]; then
		# shellcheck disable=SC1091
		source /etc/os-release
	else
		print_warning "/etc/os-release is missing."
		print_warning "This is to determine the package name signify uses."
		print_warning "Defaulting to: signify"
	fi

	if [[ "${ID:-}" == "debian" || "${ID_LIKE:-}" =~ debian ]]; then
		signify_name="signify-openbsd"
	else
		signify_name="signify"
	fi

	signify_key_url="$(jq -r ".signify_keys.$distro" "$json_file")"
	signify_key="$(basename "$signify_key_url")"
	signify_dir="$data_dir/signify_keys"

	if [[ ! -f "$signify_dir/$signify_key" ]]; then
		print_message "Fetching Signify key."

		if ! wget -P "$signify_dir" -q "$signify_key_url"; then
			print_error_and_exit "Failed to fetch Signify key from: $signify_key_url"
		fi
	fi
}

verify_gpg_signature() {
	[[ "$verification_enabled" == "false" ]] && return 0

	cd "$download_path" || exit 1

	if gpg --homedir "$data_dir" --verify "$@" &> /dev/null; then
		print_message "GPG verification: SUCCESS"
	else
		rm -f "$iso_file" "$sig_file" "$sum_file"
		print_error_and_exit "GPG verification: FAILED"
	fi
}

verify_minisign_signature() {
	[[ "$verification_enabled" == "false" ]] && return 0

	cd "$download_path" || exit 1

	if minisign -Vp "$minisign_dir/$minisign_key" -x "$sig_file" -m "$sum_file" &> /dev/null; then
		print_message "Minisign verification: SUCCESS"
	else
		rm -f "$sig_file" "$sum_file"
		print_error_and_exit "Minisign verification: FAILED"
	fi
}

verify_signify_signature() {
	[[ "$verification_enabled" == "false" ]] && return 0

	cd "$download_path" || exit 1

	if "$signify_name" -Vp "$signify_dir/$signify_key" -x "$sig_file" -m "$sum_file" &> /dev/null; then
		print_message "Signify verification: SUCCESS"
	else
		rm -f "$sig_file" "$sum_file"
		print_error_and_exit "Signify verification: FAILED"
	fi
}

verify_checksum() {
	cd "$download_path" || exit 1

	sum_algo="$(jq -r ".sum_algos.$distro" "$json_file")"

	if "$sum_algo" -c --ignore-missing "$sum_file" &> /dev/null; then
		rm -f "$sig_file" "$sum_file"
		print_message "$sum_algo verification: SUCCESS"
		print_message "Download and verification successful."
	else
		rm -f "$iso_file" "$sig_file" "$sum_file"
		print_error_and_exit "$sum_algo verification: FAILED"
	fi
}

download_alma() {
	wget_spider "$url"/{"$iso_file","$sig_file"}

	if [[ "$traverse_path" == *"${distro}_8"* ]]; then
		fetch_gpg_key "${distro}_8"
	else
		fetch_gpg_key "${distro}_9"
	fi

	wget_file "$url/$sig_file"
	verify_gpg_signature "$sig_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_alpine() {
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$sum_file","$iso_file"}
	verify_gpg_signature "$sig_file" "$iso_file"
	verify_checksum
}

download_arch() {
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$sum_file","$iso_file"}
	verify_gpg_signature "$sig_file" "$iso_file"
	verify_checksum
}

download_debian() {
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$sum_file"}
	verify_gpg_signature "$sig_file" "$sum_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_fedora() {
	wget_spider "$url"/{"$iso_file","$sig_file"}

	if [[ "$traverse_path" == *"astronomy"* ]]; then
		fetch_gpg_key "${distro}_38"
	else
		fetch_gpg_key "${distro}_39"
	fi

	wget_file "$url/$sig_file"
	verify_gpg_signature "$sig_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_gparted() {
	sig_sum_url="$(jq -r ".oddballs.gparted.sig_sum_url" "$json_file")"
	wget_spider "$url/$iso_file" "$sig_sum_url"/{"$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$sig_sum_url"/{"$sig_file","$sum_file"}
	verify_gpg_signature "$sig_file" "$sum_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_kali () {
	if [[ "$traverse_path" == *"weekly"* ]]; then
		html_content="$(wget -qO- "$url/")"
		current_week_num="$(grep -o 'W[0-9]\+' <<< "$html_content" | sort -r | head -n 1 | cut -c2-)"
		iso_file="${iso_file//\{current_week_num\}/$current_week_num}"

		if ! grep -qF "$iso_file" <<< "$html_content"; then
			print_warning "No new ISO for week: $current_week_num"
			print_warning "Downloading previous week."
			(( prev_week_num=current_week_num-1 ))
			iso_file="${iso_file//$current_week_num/$prev_week_num}"
		fi
	fi

	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$sum_file"}
	verify_gpg_signature "$sig_file" "$sum_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_mint () {
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$sum_file"}
	verify_gpg_signature "$sig_file" "$sum_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_nixos() {
	wget_spider "$url"/{"$iso_file","$sum_file"}
	wget_file "$url"/{"$sum_file","$iso_file"}
	cd "$download_path" || exit 1
	printf '\n' >> "$sum_file"
	read -r line < "$sum_file"
	new_iso_file="${line##* }"
	mv "$iso_file" "$new_iso_file"
	iso_file="$new_iso_file"
	verify_checksum
	print_message "NixOS does not provide signatures."
}

download_openbsd() {
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_signify_key
	wget_file "$url"/{"$sig_file","$sum_file"}
	verify_signify_signature
	wget_file "$url/$iso_file"
	verify_checksum
	IFS='.' read -ra path_parts <<< "$traverse_path"
	architecture="${path_parts[3]}"
	base_name="${iso_file%.*}"
	ext="${iso_file##*.}"
	mv "$iso_file" "${base_name}-${architecture}.${ext}"
}

download_opensuse() {
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$sum_file"}
	verify_gpg_signature "$sig_file" "$sum_file"
	read -r line < "$sum_file"
	iso_file="${line##* }"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_parrot() {
	wget_spider "$url"/{"$iso_file","$sig_file"}
	fetch_gpg_key "$distro"
	wget_file "$url/$sig_file"
	verify_gpg_signature "$sig_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_qubes() {
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url/$sum_file"
	verify_gpg_signature "$sum_file"
	wget_file "$url"/{"$sig_file","$iso_file"}
	verify_gpg_signature "$sig_file" "$iso_file"
	verify_checksum
}

download_rocky() {
	wget_spider "$url"/{"$iso_file","$sum_file"}
	wget_file "$url"/{"$sum_file","$iso_file"}
	verify_checksum
	print_message "Rocky Linux does not provide signatures."
}

download_slackware() {
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$sum_file","$iso_file"}
	verify_gpg_signature "$sig_file" "$iso_file"
	verify_checksum
}

download_solus() {
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$sum_file"}
	verify_gpg_signature "$sig_file" "$sum_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_tails() {
	wget_spider "$url"/{"$iso_file","$sig_file"}
	fetch_gpg_key "$distro"
	wget_file "$url"/{"$sig_file","$iso_file"}
	verify_gpg_signature "$sig_file" "$iso_file"
	rm -f "$sig_file"
	print_message "Download and GPG verification successful."
	print_message "Tails does not provide checksums."
}

download_ubuntu() {
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_gpg_key "$distro"
	[[ "$traverse_path" == *"trusty"* ]] && fetch_gpg_key "${distro}_trusty"
	wget_file "$url"/{"$sig_file","$sum_file"}
	verify_gpg_signature "$sig_file" "$sum_file"
	wget_file "$url/$iso_file"
	verify_checksum
}

download_void() {
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}
	fetch_minisign_key
	wget_file "$url"/{"$sig_file","$sum_file"}
	verify_minisign_signature
	wget_file "$url/$iso_file"
	verify_checksum
}

download_whonix() {
	wget_spider "$url"/{"$iso_file","$sig_file","$sum_file"}

	if [[ "$traverse_path" == *"qemu"* ]]; then
		fetch_gpg_key "${distro}_qemu"
	else
		fetch_gpg_key "${distro}_vbox"
	fi

	wget_file "$url"/{"$sig_file","$sum_file","$iso_file"}
	verify_gpg_signature "$sig_file" "$iso_file"
	verify_checksum
}

usage() {
	cat <<EOF
USAGE: dl-distro [OPTIONS] [DISTRO] [PATH]

  Provide dl-distro with a distro name or jq path:

      dl-distro debian
      dl-distro debian.netinst.amd64
      dl-distro debian.netinst.amd64 ~/Downloads

OPTIONS
  -h, --help         Display this usage message
  -a, --auto-update  Toggle on/off automatic JSON updating
  -d, --delete-key   Delete a GPG key: dl-distro -d [KEY_ID]
  -i, --import-key   Import a GPG key: dl-distro -i /path/to/key.asc
  -l, --list-keys    List the stored GPG keys
  -n, --no-verify    Skip key fetching and verification
  -p, --purge-data   Delete ALL stored data
  -s, --spider       Check image availability without downloading
  -u, --update-json  Update the locally stored JSON file

DISTROS
  alma    gparted  opensuse   solus
  alpine  kali     parrot     tails
  arch    mint     qubes      ubuntu
  debian  nixos    rocky      void
  fedora  openbsd  slackware  whonix
EOF
	exit 0
}

list_gpg_keys() {
	if gpg --homedir "$data_dir" --list-keys 2> /dev/null; then
		exit 0
	else
		print_message "There are no GPG keys stored."
		exit 0
	fi
}

import_gpg_key() {
	[[ ! -d "$data_dir" ]] && mkdir -p "$data_dir"

	gpg_dir_perms="$(stat -c "%a" "$data_dir")"

	[[ "$gpg_dir_perms" != "700" ]] && chmod 700 "$data_dir"

	if gpg --homedir "$data_dir" --import "$1" &> /dev/null; then
		print_message "Successfully imported GPG key: $1"
		exit 0
	else
		print_error_and_exit "Failed to import GPG key: $1"
	fi
}

delete_gpg_key() {
	if gpg --homedir "$data_dir" --delete-keys "$1" &> /dev/null; then
		print_message "Successfully deleted GPG key: $1"
		exit 0
	else
		print_error_and_exit "Failed to delete GPG key: $1"
	fi
}

purge_data() {
	read -rp "[dl-distro] WARNING: Really delete ALL stored data? (y/N): " user_choice >&2

	if [[ "$user_choice" == "Y" || "$user_choice" == "y" ]]; then
		rm -rf "$data_dir"
		print_message "Successfully deleted all data."
		exit 0
	else
		print_message "Data purge cancelled."
		exit 0
	fi
}

traverse_json() {
	traverse_path="$1"

	trap "exit 130" INT

	if jq -e "$traverse_path.url" "$json_file" &> /dev/null; then
		IFS='|' read -r url iso_file sig_file sum_file <<< "$(jq -r "[$traverse_path | .url, .iso_file, .sig_file, .sum_file] | join(\"|\")" "$json_file")"
	else
		[[ "$cli_mode" = "true" ]] && print_error_and_exit "Invalid jq path."

		mapfile -t choices < <(jq -r "$traverse_path | keys | .[]" "$json_file")

		[[ "${#choices[@]}" -eq 0 ]] && print_error_and_exit "JSON parsing error."

		while true; do
			printf "\n"
			for i in "${!choices[@]}"; do
				printf "   %d. %s\n" "$((i+1))" "${choices[$i]}"
			done
			printf "\n"

			read -rp "Enter your choice (1-${#choices[@]}): " choice

			if [[ "$choice" =~ ^[0-9]+$ ]] && (( choice >= 1 && choice <= "${#choices[@]}" )); then
				traverse_json "$traverse_path.${choices[choice-1]}"
				return 0
			else
				printf "\nInvalid choice. Please choose a number 1 to %s.\n" "${#choices[@]}" >&2
			fi
		done
	fi
}

fetch_json() {
	[[ "$auto_fetch_enabled" == "true" ]] && update_json

	json_paths=("${XDG_CONFIG_HOME:-$HOME/.config}/dl-distro/data.json"
	            "$(dirname "$0")/data.json"
	            "$data_dir/json_data/data.json")

	for json_path in "${json_paths[@]}"; do
		if [[ -f "$json_path" ]]; then
			json_file="$(realpath -m "$json_path")"
			return 0
		fi
	done

	update_json
	fetch_json
}

update_json() {
	json_urls=("https://codeberg.org/bashuser30/dl-distro/raw/branch/master/data.json"
	           "https://gitlab.com/bashuser30/dl-distro/-/raw/master/data.json"
	           "https://raw.githubusercontent.com/bashuser30/dl-distro/master/data.json")

	json_dir="$data_dir/json_data"

	for json_url in "${json_urls[@]}"; do
		if wget -P "$json_dir" -q "$json_url"; then
			print_message "Successfully downloaded latest JSON file."
			updated="true"
			return 0
		else
			print_warning "Failed to download data.json from: $json_url"
			print_warning "Trying next mirror..."
		fi
	done

	print_error_and_exit "Failed to update the JSON file."
}

toggle_auto_update() {
	config_dir="$(dirname "$config_file")"

	[[ ! -d "$config_dir" ]] && mkdir -p "$config_dir"

	if [[ "$auto_fetch_enabled" == "true" ]]; then
		printf "auto_fetch_enabled=false\n" > "$config_file"
		print_message "Disabled JSON auto-updating."
	else
		printf "auto_fetch_enabled=true\n" > "$config_file"
		print_message "Enabled JSON auto-updating."
	fi

	exit 0
}

main() {
	data_dir="${XDG_DATA_HOME:-$HOME/.local/share}/dl-distro"
	config_file="${XDG_CONFIG_HOME:-$HOME/.config}/dl-distro/dl-distro.conf"
	verification_enabled="true"
	spider_mode_enabled="false"
	auto_fetch_enabled="false"
	cli_mode="false"

	if [[ -f "$config_file" ]]; then
		# shellcheck disable=SC1090
		source "$config_file"
	fi

	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			-h|--help) usage ;;
			-a|--auto-update) toggle_auto_update ;;
			-d|--delete-key) delete_gpg_key "${2:-}" ;;
			-i|--import-key) import_gpg_key "${2:-}" ;;
			-l|--list-keys) list_gpg_keys ;;
			-n|--no-verify) verification_enabled="false"; shift ;;
			-p|--purge-data) purge_data ;;
			-s|--spider) spider_mode_enabled="true"; shift ;;
			-u|--update-json) update_json; shift ;;
			-*) print_error_and_exit "Invalid option: $1" ;;
			*) break ;;
		esac
	done

	[[ -z "${1:-}" && -n "${updated:-}" ]] && exit 0
	[[ -z "${1:-}" ]] && print_error_and_exit "No distro provided."

	if [[ "$1" == *.* ]]; then
		jq_path=".$1"
		distro="${1%%.*}"
		cli_mode="true"
	else
		distro="$1"
	fi

	download_path="$(realpath -m "${2:-$(pwd)}")"

	if type download_"$distro" &> /dev/null; then
		fetch_json
		traverse_json "${jq_path:-.$distro}"
		download_"$distro"
	else
		print_error_and_exit "Invalid distro: $distro"
	fi
}

main "$@"
