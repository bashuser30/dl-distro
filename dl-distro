#!/usr/bin/env bash
# https://codeberg.org/codeberge/dl-distro/src/branch/master/README.md

set -euo pipefail

download_and_verify_iso() {

    if [[ "$download_path" == "--spider" ]]; then
        if ! wget -nv -c --spider "$url/$iso_file"; then
            echo -e "\nFailed to download $iso_file.\n"
            exit 1
	else
            exit 0
        fi
    fi

    if [[ "$download_path" != "$(pwd)" ]]; then
        mkdir -p "$download_path" || { echo "Failed to create directory $download_path"; exit 1; }
        cd "$download_path" || { echo "Failed to change directory to $download_path"; exit 1; }
    fi

    if ! gpg --list-keys "$gpg_key" &> /dev/null; then
        echo -e "Fetching GPG key: $gpg_key\n"
        if ! gpg --keyserver keyserver.ubuntu.com --recv-keys "$gpg_key"; then
            echo -e "\nError: Failed to fetch GPG key $gpg_key.\n"
            exit 1
        fi
    fi

    if [[ "$distro" != "arch" ]]; then
        for file in "$sig_file" "$sum_file"; do
            if ! wget -q --show-progress -c "$url/$file"; then
                echo -e "\nFailed to download $file.\n"
                exit 1
            fi
        done
    else
        for file in "$sig_file" "$sum_file" "$iso_file"; do
            if ! wget -q --show-progress -c "$url/$file"; then
                echo -e "\nFailed to download $file.\n"
                exit 1
            fi
        done
    fi

    if [[ "$distro" != "arch" ]]; then
        if ! gpg --verify "$sig_file" "$sum_file"; then
            echo -e "\nGPG verification failed.\n"
            rm -f "$sig_file" "$sum_file"
            exit 1
        fi
    else
        if ! gpg --verify "$sig_file" "$iso_file"; then
            echo -e "\nGPG verification failed.\n"
            rm -f "$iso_file" "$sig_file" "$sum_file"
            exit 1
        fi
    fi

    if [[ "$distro" != "arch" ]]; then
        if ! wget -q --show-progress -c "$url/$iso_file"; then
            echo -e "\nFailed to download $iso_file.\n"
            exit 1
        fi
    fi

    if ! "$sum_algo" -c --ignore-missing "$sum_file"; then
        echo -e "\n$sum_algo verification failed.\n"
        rm -f "$iso_file" "$sig_file" "$sum_file"
        exit 1
    fi

    rm -f "$sig_file" "$sum_file"
    echo -e "\nDownload and verification succeeded.\n"
    exit 0

}

get_choice() {

    local options=("$@")
    local num_options="${#options[@]}"

    if [[ "$num_options" -eq 1 ]]; then
        printf "%s" "${options[0]}"
        return
    fi

    echo >&2

    for i in "${!options[@]}"; do
        printf "   %d. %s\n" "$((i+1))" "${options[$i]}" >&2
    done

    echo >&2

    read -rp "Enter your choice (1-$num_options): " user_choice >&2

    printf "%s" "${options[$user_choice-1]}"

}

download_arch() {

    version="$(jq -r ".${distro}.version" "$json_data")"
    gpg_key="$(jq -r ".${distro}.gpg_key" "$json_data")"
    url="$(jq -r ".${distro}.url" "$json_data" | sed "s/{version}/$version/")"
    iso_file="$(jq -r ".${distro}.iso_file" "$json_data" | sed "s/{version}/$version/")"
    sig_file="$(jq -r ".${distro}.sig_file" "$json_data" | sed "s/{version}/$version/")"
    sum_file="$(jq -r ".${distro}.sum_file" "$json_data")"
    sum_algo="$(jq -r ".${distro}.sum_algo" "$json_data")"

    download_and_verify_iso

}

download_debian() {

    version="$(jq -r ".${distro}.version" "$json_data")"
    gpg_key="$(jq -r ".${distro}.gpg_key" "$json_data")"
    sig_file="$(jq -r ".${distro}.sig_file" "$json_data")"
    sum_file="$(jq -r ".${distro}.sum_file" "$json_data")"
    sum_algo="$(jq -r ".${distro}.sum_algo" "$json_data")"
    installer_type="$(get_choice "Net Installer" "Live Installer")"

    case "$installer_type" in
        "Net Installer")

            selected_architecture="$(get_choice "amd64" "arm64" "armel" "armhf" "i386" "mips64el" "mipsel" "ppc64el" "s390x")"
            url="$(jq -r ".${distro}.net_installer.url" "$json_data" | sed "s/{selected_architecture}/$selected_architecture/")"
            iso_file="$(jq -r ".${distro}.net_installer.iso_file" "$json_data" | sed "s/{version}/$version/" | sed "s/{selected_architecture}/$selected_architecture/")" ;;

        "Live Installer")

            selected_environment="$(get_choice "cinnamon" "gnome" "kde" "lxde" "lxqt" "mate" "standard" "xfce")"
            url="$(jq -r ".${distro}.live_installer.url" "$json_data")"
            iso_file="$(jq -r ".${distro}.live_installer.iso_file" "$json_data" | sed "s/{version}/$version/" | sed "s/{selected_environment}/$selected_environment/")" ;;
    esac

    download_and_verify_iso

}

download_kali() {

    version="$(jq -r ".${distro}.version" "$json_data")"
    gpg_key="$(jq -r ".${distro}.gpg_key" "$json_data")"
    sig_file="$(jq -r ".${distro}.sig_file" "$json_data")"
    sum_file="$(jq -r ".${distro}.sum_file" "$json_data")"
    sum_algo="$(jq -r ".${distro}.sum_algo" "$json_data")"
    installer_type="$(get_choice "Kali" "Kali (weekly)")"
    selected_image="$(get_choice "live" "qemu" "virtualbox" "vmware" "hyperv" "installer" "installer-netinst" "installer-purple")"

    case "$selected_image" in
        "live"|"installer"|"installer-netinst") selected_architecture="$(get_choice "amd64" "arm64" "i386")"; ext="iso" ;;
        "installer-purple")                     selected_architecture="$(get_choice "amd64")";                ext="iso" ;;
        "hyperv")                               selected_architecture="$(get_choice "amd64")";                ext="7z" ;;
        *)
           if [[ "$installer_type" == "Kali (weekly)" ]]; then
               selected_architecture="$(get_choice "amd64")"
           else
               selected_architecture="$(get_choice "amd64" "i386")"
           fi
           ext="7z" ;;
    esac

    if [[ "$installer_type" != "Kali (weekly)" ]]; then

        declare -A type_to_patch
        #type_to_patch=( ["hyperv"]="a" ["installer"]="a" ["installer-netinst"]="a" ["installer-purple"]="a" )

        file_version="$version"

        if [[ -v type_to_patch["$selected_image"] ]]; then

            patch="${type_to_patch[$selected_image]}"

            if [[ -n "$patch" ]]; then
                file_version+="$patch"
            fi
        fi
    fi

    if [[ "$installer_type" == "Kali (weekly)" ]]; then

        url="$(jq -r ".${distro}.weekly.url" "$json_data")"
        html_content="$(wget -qO- "$url")"
        current_week_num="$(echo "$html_content" | grep -o 'W[0-9]\+' | sort -r | head -n1 | cut -c2-)"
        iso_file="$(jq -r ".${distro}.weekly.iso_file" "$json_data" | sed "s/{current_week_num}/$current_week_num/" | sed "s/{selected_image}/$selected_image/" | sed "s/{selected_architecture}/$selected_architecture/" | sed "s/{ext}/$ext/")"

        if ! echo "$html_content" | grep -q "$iso_file"; then

            echo -e "No new ISO for week: $current_week_num. Downloading previous week.\n"
            (( prev_week_num=current_week_num-1 ))
            iso_file="${iso_file//$current_week_num/$prev_week_num}"

        fi

    else

        url="$(jq -r ".${distro}.standard.url" "$json_data")"
        iso_file="$(jq -r ".${distro}.standard.iso_file" "$json_data" | sed "s/{file_version}/$file_version/" | sed "s/{selected_image}/$selected_image/" | sed "s/{selected_architecture}/$selected_architecture/" | sed "s/{ext}/$ext/")"

    fi

    download_and_verify_iso

}

download_mint() {

    gpg_key="$(jq -r ".${distro}.gpg_key" "$json_data")"
    sig_file="$(jq -r ".${distro}.sig_file" "$json_data")"
    sum_file="$(jq -r ".${distro}.sum_file" "$json_data")"
    sum_algo="$(jq -r ".${distro}.sum_algo" "$json_data")"
    installer_type="$(get_choice "Mint" "Mint (Debian Edition)")"

    if [[ "$installer_type" == "Mint" ]]; then

        selected_environment="$(get_choice "cinnamon" "mate" "xfce")"
        version="$(jq -r ".${distro}.standard.version" "$json_data")"
        url="$(jq -r ".${distro}.standard.url" "$json_data" | sed "s/{version}/$version/")"
        iso_file="$(jq -r ".${distro}.standard.iso_file" "$json_data" | sed "s/{version}/$version/" | sed "s/{selected_environment}/$selected_environment/")"

    else

       version="$(jq -r ".${distro}.debian_edition.version" "$json_data")"
       url="$(jq -r ".${distro}.debian_edition.url" "$json_data")"
       iso_file="$(jq -r ".${distro}.debian_edition.iso_file" "$json_data" | sed "s/{version}/$version/")"

    fi

    download_and_verify_iso

}

download_ubuntu() {

    gpg_key="$(jq -r ".${distro}.gpg_key" "$json_data")"
    sig_file="$(jq -r ".${distro}.sig_file" "$json_data")"
    sum_file="$(jq -r ".${distro}.sum_file" "$json_data")"
    sum_algo="$(jq -r ".${distro}.sum_algo" "$json_data")"
    installer_type="$(get_choice "Ubuntu" "Ubuntu (LTS)")"

    if [[ "$installer_type" == "Ubuntu" ]]; then
        version="$(jq -r ".${distro}.standard.version" "$json_data")"
    else
        version="$(jq -r ".${distro}.lts.version" "$json_data")"
    fi

    selected_image="$(get_choice "desktop" "live-server")"
    url="$(jq -r ".${distro}.url" "$json_data" | sed "s/{version}/$version/")"
    iso_file="$(jq -r ".${distro}.iso_file" "$json_data" | sed "s/{version}/$version/" | sed "s/{selected_image}/$selected_image/")"

    download_and_verify_iso

}
check_dependencies() {
    for cmd in wget gpg jq; do
        if ! command -v "$cmd" &> /dev/null; then
            echo "The following dependency is missing: $cmd"
            echo "Please install it and rerun the script."
            exit 1
        fi
    done
}

usage() {
    cat <<EOF

USAGE:
    dl-distro <distro> [path]

DISTROS:
    arch
    debian
    kali
    mint
    ubuntu

EXAMPLES:
    dl-distro arch
    dl-distro arch /run/media/$USER/Ventoy

EOF
}

dl_distro() {
    distro="${1:-help}"
    download_path="${2:-$(pwd)}"

    if [[ "$distro" == "-h" || "$distro" == "--help" || "$distro" == "help" ]]; then
        usage
        exit 0
    fi

    if [[ -f "$HOME/.config/dl-distro/distro_data.json" ]]; then
        json_data="$HOME/.config/dl-distro/distro_data.json"
    elif [[ -f "/usr/share/dl-distro/distro_data.json" ]]; then
        json_data="/usr/share/dl-distro/distro_data.json"
    elif [[ -f "$(dirname "$0")/distro_data.json" ]]; then
        json_data="$(dirname "$0")/distro_data.json"
    else
        echo "Error: distro_data.json not found in any of the expected locations."
        exit 1
    fi

    case "$distro" in
        "arch") download_arch ;;
        "debian") download_debian ;;
        "kali") download_kali ;;
        "mint") download_mint ;;
        "ubuntu") download_ubuntu ;;
        *) echo "Error: Please use -h or --help for usage and supported distros."; exit 1 ;;
    esac
}

check_dependencies
dl_distro "$@"
